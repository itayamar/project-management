{"ast":null,"code":"const PRODUCTS_BASE_URL = '/api/projects/';\nasync function fetchProjects(page = 1, limit = 20) {\n  console.log('HERE 2');\n  const url = `${PRODUCTS_BASE_URL}?page=${page}&limit=${limit}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Failed to fetch projects');\n  const projectsData = await response.json();\n  console.log('project sData', projectsData);\n  return projectsData;\n}\nasync function fetchProject(projectId) {\n  const url = `${PRODUCTS_BASE_URL}?projectId=${projectId}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Failed to fetch project');\n  const project = await response.json();\n  return project;\n}\nasync function createProject(projectData) {\n  const response = await fetch(PRODUCTS_BASE_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(projectData)\n  });\n  if (!response.ok) throw new Error('Failed to create project');\n  const project = await response.json();\n  return project;\n}\nasync function updateProject(projectId, projectData) {\n  const response = await fetch(`${PRODUCTS_BASE_URL}${projectId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(projectData)\n  });\n  if (!response.ok) throw new Error('Failed to update project');\n  const project = await response.json();\n  return project;\n}\nasync function deleteProject(projectId) {\n  const response = await fetch(`${PRODUCTS_BASE_URL}${projectId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) throw new Error('Failed to delete project');\n  return await response.json();\n}\nexport { fetchProjects, fetchProject, createProject, updateProject, deleteProject };","map":{"version":3,"names":["PRODUCTS_BASE_URL","fetchProjects","page","limit","console","log","url","response","fetch","ok","Error","projectsData","json","fetchProject","projectId","project","createProject","projectData","method","headers","body","JSON","stringify","updateProject","deleteProject"],"sources":["/Users/itayamar/WebstormProjects/toka/client/src/services/projects.js"],"sourcesContent":["const PRODUCTS_BASE_URL = '/api/projects/';\n\nasync function fetchProjects(page=1, limit=20) {\n    console.log('HERE 2')\n    const url = `${PRODUCTS_BASE_URL}?page=${page}&limit=${limit}`;\n    const response = await fetch(url)\n    if (!response.ok) throw new Error('Failed to fetch projects')\n\n    const projectsData = await response.json()\n    console.log('project sData', projectsData)\n    return projectsData\n}\n\nasync function fetchProject(projectId) {\n    const url = `${PRODUCTS_BASE_URL}?projectId=${projectId}`\n    const response = await fetch(url)\n    if (!response.ok) throw new Error('Failed to fetch project')\n    const project = await response.json()\n    return project\n}\n\nasync function createProject(projectData) {\n    const response = await fetch(PRODUCTS_BASE_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(projectData),\n    })\n\n    if (!response.ok) throw new Error('Failed to create project')\n\n    const project = await response.json()\n    return project\n}\n\nasync function updateProject(projectId, projectData) {\n    const response = await fetch(`${PRODUCTS_BASE_URL}${projectId}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(projectData),\n    })\n\n    if (!response.ok) throw new Error('Failed to update project')\n\n    const project = await response.json()\n    return project\n}\n\nasync function deleteProject(projectId) {\n    const response = await fetch(`${PRODUCTS_BASE_URL}${projectId}`, {\n        method: 'DELETE'\n    })\n    if (!response.ok) throw new Error('Failed to delete project')\n    return await response.json()\n}\n\nexport {\n    fetchProjects,\n    fetchProject,\n    createProject,\n    updateProject,\n    deleteProject,\n};"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,gBAAgB;AAE1C,eAAeC,aAAaA,CAACC,IAAI,GAAC,CAAC,EAAEC,KAAK,GAAC,EAAE,EAAE;EAC3CC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,MAAMC,GAAG,GAAG,GAAGN,iBAAiB,SAASE,IAAI,UAAUC,KAAK,EAAE;EAC9D,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAE7D,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC1CR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,YAAY,CAAC;EAC1C,OAAOA,YAAY;AACvB;AAEA,eAAeE,YAAYA,CAACC,SAAS,EAAE;EACnC,MAAMR,GAAG,GAAG,GAAGN,iBAAiB,cAAcc,SAAS,EAAE;EACzD,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5D,MAAMK,OAAO,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;EACrC,OAAOG,OAAO;AAClB;AAEA,eAAeC,aAAaA,CAACC,WAAW,EAAE;EACtC,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACR,iBAAiB,EAAE;IAC5CkB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;EACpC,CAAC,CAAC;EAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAE7D,MAAMK,OAAO,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;EACrC,OAAOG,OAAO;AAClB;AAEA,eAAeQ,aAAaA,CAACT,SAAS,EAAEG,WAAW,EAAE;EACjD,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,iBAAiB,GAAGc,SAAS,EAAE,EAAE;IAC7DI,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;EACpC,CAAC,CAAC;EAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAE7D,MAAMK,OAAO,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;EACrC,OAAOG,OAAO;AAClB;AAEA,eAAeS,aAAaA,CAACV,SAAS,EAAE;EACpC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,iBAAiB,GAAGc,SAAS,EAAE,EAAE;IAC7DI,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7D,OAAO,MAAMH,QAAQ,CAACK,IAAI,CAAC,CAAC;AAChC;AAEA,SACIX,aAAa,EACbY,YAAY,EACZG,aAAa,EACbO,aAAa,EACbC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}