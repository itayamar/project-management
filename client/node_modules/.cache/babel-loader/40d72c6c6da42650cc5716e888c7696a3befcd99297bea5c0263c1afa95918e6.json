{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'ProjectList',\n  data() {\n    return {\n      showModal: false,\n      showDeleteModal: false,\n      isEditing: false,\n      projectToDelete: null,\n      projectForm: {\n        name: '',\n        description: ''\n      },\n      errors: {}\n    };\n  },\n  computed: {\n    ...mapState({\n      projects: state => state.projects\n    }),\n    ...mapGetters(['isLoading', 'hasError', 'errorMessage'])\n  },\n  created() {\n    this.loadProjects();\n  },\n  methods: {\n    ...mapActions({\n      fetchProjects: 'fetchProjects',\n      createProject: 'createProject',\n      updateProject: 'updateProject',\n      deleteProject: 'deleteProject'\n    }),\n    loadProjects() {\n      this.fetchProjects();\n    },\n    validateForm() {\n      this.errors = {};\n      let isValid = true;\n      if (!this.projectForm.name.trim()) {\n        this.errors.name = 'Project name is required';\n        isValid = false;\n      } else if (this.projectForm.name.trim().length < 3) {\n        this.errors.name = 'Project name must be at least 3 characters';\n        isValid = false;\n      }\n      return isValid;\n    },\n    openCreateProjectModal() {\n      this.isEditing = false;\n      this.projectForm = {\n        name: '',\n        description: ''\n      };\n      this.showModal = true;\n    },\n    editProject(project) {\n      this.isEditing = true;\n      this.projectForm = {\n        name: project.name,\n        description: project.description || ''\n      };\n      this.projectToEdit = project;\n      this.showModal = true;\n    },\n    async saveProject() {\n      if (!this.validateForm()) return;\n      try {\n        if (this.isEditing) {\n          await this.updateProject({\n            projectId: this.projectToEdit._id,\n            projectData: this.projectForm\n          });\n          this.$toasted.show('Project updated successfully!', {\n            type: 'success'\n          });\n        } else {\n          await this.createProject(this.projectForm);\n          this.$toasted.show('Project created successfully!', {\n            type: 'success'\n          });\n        }\n        this.closeModal();\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, {\n          type: 'error'\n        });\n      }\n    },\n    confirmDelete(project) {\n      this.projectToDelete = project;\n      this.showDeleteModal = true;\n    },\n    async deleteProject() {\n      if (!this.projectToDelete) return;\n      try {\n        await this.deleteProject(this.projectToDelete._id);\n        this.$toasted.show('Project deleted successfully!', {\n          type: 'success'\n        });\n        this.closeDeleteModal();\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, {\n          type: 'error'\n        });\n      }\n    },\n    closeModal() {\n      this.showModal = false;\n      this.projectForm = {\n        name: '',\n        description: ''\n      };\n      this.errors = {};\n      this.projectToEdit = null;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.projectToDelete = null;\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","name","data","showModal","showDeleteModal","isEditing","projectToDelete","projectForm","description","errors","computed","projects","state","created","loadProjects","methods","fetchProjects","createProject","updateProject","deleteProject","validateForm","isValid","trim","length","openCreateProjectModal","editProject","project","projectToEdit","saveProject","projectId","_id","projectData","$toasted","show","type","closeModal","error","message","confirmDelete","closeDeleteModal"],"sources":["src/views/projects/ProjectList.vue"],"sourcesContent":["<template>\n  <div class=\"project-list\">\n    <div class=\"header-section\">\n      <h2 class=\"section-title\">Projects</h2>\n      <button class=\"btn btn-primary\" @click=\"openCreateProjectModal\">\n        <span class=\"btn-icon\">+</span>New Project\n      </button>\n    </div>\n\n    <!-- Loading state -->\n    <div v-if=\"isLoading('project') || isLoading('tasks')\" class=\"empty-state\">\n      <p>Loading projects...</p>\n    </div>\n\n    <!-- Error state -->\n    <div v-else-if=\"hasError\" class=\"empty-state\">\n      <h3>Error loading projects</h3>\n      <p>{{ errorMessage }}</p>\n      <button class=\"btn btn-primary mt-3\" @click=\"loadProjects\">Retry</button>\n    </div>\n\n    <!-- Empty state -->\n    <div v-else-if=\"projects.length === 0\" class=\"empty-state\">\n      <h3>No projects yet</h3>\n      <p>Create your first project to get started</p>\n      <button class=\"btn btn-primary mt-3\" @click=\"openCreateProjectModal\">\n        <span class=\"btn-icon\">+</span>New Project\n      </button>\n    </div>\n\n    <!-- Project grid -->\n    <div v-else>\n      <div\n          v-for=\"project in projects\"\n          :key=\"project.id\"\n          class=\"col-12 col-md-6 col-sm-12 mb-4\"\n      >\n        {{project}}\n      </div>\n    </div>\n\n    projects ----{{projects}}\n\n\n<!--    <div v-else class=\"row\">-->\n<!--      <div-->\n<!--          v-for=\"project in projects\"-->\n<!--          :key=\"project._id\"-->\n<!--          class=\"col-12 col-md-6 col-sm-12 mb-4\"-->\n<!--      >-->\n<!--        <div class=\"card\">-->\n<!--          <div class=\"card-header\">-->\n<!--            <div class=\"card-title\">{{ project.name }}</div>-->\n<!--          </div>-->\n\n<!--          <div class=\"card-content\">-->\n<!--            <p v-if=\"project.description\" class=\"text-gray\">-->\n<!--              {{ project.description }}-->\n<!--            </p>-->\n<!--            <p v-else class=\"text-gray text-sm\">-->\n<!--              No description-->\n<!--            </p>-->\n<!--          </div>-->\n\n<!--          <div class=\"card-footer\">-->\n<!--            <router-link :to=\"`/projects/${project._id}`\">-->\n<!--              <button class=\"btn btn-secondary\">View Tasks</button>-->\n<!--            </router-link>-->\n\n<!--            <div>-->\n<!--              <button class=\"btn btn-secondary btn-small mr-2\" @click=\"editProject(project)\">-->\n<!--                Edit-->\n<!--              </button>-->\n<!--              <button class=\"btn btn-danger btn-small\" @click=\"confirmDelete(project)\">-->\n<!--                Delete-->\n<!--              </button>-->\n<!--            </div>-->\n<!--          </div>-->\n<!--        </div>-->\n<!--      </div>-->\n<!--    </div>-->\n\n    <!-- Project Modal -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3>{{ isEditing ? 'Edit Project' : 'Create Project' }}</h3>\n          <button class=\"close-btn\" @click=\"closeModal\">&times;</button>\n        </div>\n\n        <div class=\"modal-body\">\n          <form @submit.prevent=\"saveProject\">\n            <div class=\"form-group\">\n              <label class=\"form-label\" for=\"name\">Project Name</label>\n              <input\n                  id=\"name\"\n                  v-model=\"projectForm.name\"\n                  class=\"form-input\"\n                  type=\"text\"\n                  required\n                  :class=\"{'error': errors.name}\"\n              >\n              <p v-if=\"errors.name\" class=\"error-message\">{{ errors.name }}</p>\n            </div>\n\n            <div class=\"form-group\">\n              <label class=\"form-label\" for=\"description\">Description (optional)</label>\n              <input\n                  id=\"description\"\n                  v-model=\"projectForm.description\"\n                  class=\"form-input\"\n                  type=\"text\"\n              >\n            </div>\n\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary mr-2\" @click=\"closeModal\">\n                Cancel\n              </button>\n              <button type=\"submit\" class=\"btn btn-primary\">\n                {{ isEditing ? 'Update' : 'Create' }}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n\n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3>Confirm Delete</h3>\n          <button class=\"close-btn\" @click=\"closeDeleteModal\">&times;</button>\n        </div>\n\n        <div class=\"modal-body\">\n          <p>Are you sure you want to delete \"{{ projectToDelete ? projectToDelete.name : '' }}\"?</p>\n          <p class=\"text-gray text-sm\">This will also delete all tasks associated with this project and cannot be undone.</p>\n        </div>\n\n        <div class=\"modal-footer\">\n          <button class=\"btn btn-secondary mr-2\" @click=\"closeDeleteModal\">\n            Cancel\n          </button>\n          <button class=\"btn btn-danger\" @click=\"deleteProject\">\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions } from 'vuex'\n\nexport default {\n  name: 'ProjectList',\n  data() {\n    return {\n      showModal: false,\n      showDeleteModal: false,\n      isEditing: false,\n      projectToDelete: null,\n      projectForm: {\n        name: '',\n        description: ''\n      },\n      errors: {}\n    }\n  },\n  computed: {\n    ...mapState({\n      projects: state => state.projects\n    }),\n    ...mapGetters([\n      'isLoading',\n      'hasError',\n      'errorMessage'\n    ])\n  },\n  created() {\n    this.loadProjects()\n  },\n  methods: {\n    ...mapActions({\n      fetchProjects: 'fetchProjects',\n      createProject: 'createProject',\n      updateProject: 'updateProject',\n      deleteProject: 'deleteProject'\n    }),\n\n    loadProjects() {\n      this.fetchProjects()\n    },\n\n    validateForm() {\n      this.errors = {}\n      let isValid = true\n\n      if (!this.projectForm.name.trim()) {\n        this.errors.name = 'Project name is required'\n        isValid = false\n      } else if (this.projectForm.name.trim().length < 3) {\n        this.errors.name = 'Project name must be at least 3 characters'\n        isValid = false\n      }\n\n      return isValid\n    },\n\n    openCreateProjectModal() {\n      this.isEditing = false\n      this.projectForm = {\n        name: '',\n        description: ''\n      }\n      this.showModal = true\n    },\n\n    editProject(project) {\n      this.isEditing = true\n      this.projectForm = {\n        name: project.name,\n        description: project.description || ''\n      }\n      this.projectToEdit = project\n      this.showModal = true\n    },\n\n    async saveProject() {\n      if (!this.validateForm()) return\n\n      try {\n        if (this.isEditing) {\n          await this.updateProject({\n            projectId: this.projectToEdit._id,\n            projectData: this.projectForm\n          })\n          this.$toasted.show('Project updated successfully!', { type: 'success' })\n        } else {\n          await this.createProject(this.projectForm)\n          this.$toasted.show('Project created successfully!', { type: 'success' })\n        }\n        this.closeModal()\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, { type: 'error' })\n      }\n    },\n\n    confirmDelete(project) {\n      this.projectToDelete = project\n      this.showDeleteModal = true\n    },\n\n    async deleteProject() {\n      if (!this.projectToDelete) return\n\n      try {\n        await this.deleteProject(this.projectToDelete._id)\n        this.$toasted.show('Project deleted successfully!', { type: 'success' })\n        this.closeDeleteModal()\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, { type: 'error' })\n      }\n    },\n\n    closeModal() {\n      this.showModal = false\n      this.projectForm = { name: '', description: '' }\n      this.errors = {}\n      this.projectToEdit = null\n    },\n\n    closeDeleteModal() {\n      this.showDeleteModal = false\n      this.projectToDelete = null\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.project-list {\n  position: relative;\n}\n\n.header-section {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.section-title {\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n// Modal styles\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n\n  &-content {\n    background-color: #fff;\n    border-radius: 0.5rem;\n    width: 90%;\n    max-width: 500px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);\n    overflow: hidden;\n  }\n\n  &-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n    border-bottom: 1px solid #e5e7eb;\n\n    h3 {\n      margin: 0;\n      font-size: 1.25rem;\n      font-weight: 600;\n    }\n\n    .close-btn {\n      background: none;\n      border: none;\n      font-size: 1.5rem;\n      cursor: pointer;\n      color: #6b7280;\n      line-height: 1;\n      padding: 0;\n    }\n  }\n\n  &-body {\n    padding: 1rem;\n  }\n\n  &-footer {\n    display: flex;\n    justify-content: flex-end;\n    padding: 1rem 0 0;\n  }\n}\n\n// Form error styles\n.error {\n  border-color: #ef4444;\n}\n\n.error-message {\n  color: #ef4444;\n  font-size: 0.75rem;\n  margin-top: 0.25rem;\n}\n</style>"],"mappings":"AA2JA,SAAAA,QAAA,EAAAC,UAAA,EAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,eAAA;MACAC,SAAA;MACAC,eAAA;MACAC,WAAA;QACAN,IAAA;QACAO,WAAA;MACA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAZ,QAAA;MACAa,QAAA,EAAAC,KAAA,IAAAA,KAAA,CAAAD;IACA;IACA,GAAAZ,UAAA,EACA,aACA,YACA,eACA;EACA;EACAc,QAAA;IACA,KAAAC,YAAA;EACA;EACAC,OAAA;IACA,GAAAf,UAAA;MACAgB,aAAA;MACAC,aAAA;MACAC,aAAA;MACAC,aAAA;IACA;IAEAL,aAAA;MACA,KAAAE,aAAA;IACA;IAEAI,aAAA;MACA,KAAAX,MAAA;MACA,IAAAY,OAAA;MAEA,UAAAd,WAAA,CAAAN,IAAA,CAAAqB,IAAA;QACA,KAAAb,MAAA,CAAAR,IAAA;QACAoB,OAAA;MACA,gBAAAd,WAAA,CAAAN,IAAA,CAAAqB,IAAA,GAAAC,MAAA;QACA,KAAAd,MAAA,CAAAR,IAAA;QACAoB,OAAA;MACA;MAEA,OAAAA,OAAA;IACA;IAEAG,uBAAA;MACA,KAAAnB,SAAA;MACA,KAAAE,WAAA;QACAN,IAAA;QACAO,WAAA;MACA;MACA,KAAAL,SAAA;IACA;IAEAsB,YAAAC,OAAA;MACA,KAAArB,SAAA;MACA,KAAAE,WAAA;QACAN,IAAA,EAAAyB,OAAA,CAAAzB,IAAA;QACAO,WAAA,EAAAkB,OAAA,CAAAlB,WAAA;MACA;MACA,KAAAmB,aAAA,GAAAD,OAAA;MACA,KAAAvB,SAAA;IACA;IAEA,MAAAyB,YAAA;MACA,UAAAR,YAAA;MAEA;QACA,SAAAf,SAAA;UACA,WAAAa,aAAA;YACAW,SAAA,OAAAF,aAAA,CAAAG,GAAA;YACAC,WAAA,OAAAxB;UACA;UACA,KAAAyB,QAAA,CAAAC,IAAA;YAAAC,IAAA;UAAA;QACA;UACA,WAAAjB,aAAA,MAAAV,WAAA;UACA,KAAAyB,QAAA,CAAAC,IAAA;YAAAC,IAAA;UAAA;QACA;QACA,KAAAC,UAAA;MACA,SAAAC,KAAA;QACA,KAAAJ,QAAA,CAAAC,IAAA,WAAAG,KAAA,CAAAC,OAAA;UAAAH,IAAA;QAAA;MACA;IACA;IAEAI,cAAAZ,OAAA;MACA,KAAApB,eAAA,GAAAoB,OAAA;MACA,KAAAtB,eAAA;IACA;IAEA,MAAAe,cAAA;MACA,UAAAb,eAAA;MAEA;QACA,WAAAa,aAAA,MAAAb,eAAA,CAAAwB,GAAA;QACA,KAAAE,QAAA,CAAAC,IAAA;UAAAC,IAAA;QAAA;QACA,KAAAK,gBAAA;MACA,SAAAH,KAAA;QACA,KAAAJ,QAAA,CAAAC,IAAA,WAAAG,KAAA,CAAAC,OAAA;UAAAH,IAAA;QAAA;MACA;IACA;IAEAC,WAAA;MACA,KAAAhC,SAAA;MACA,KAAAI,WAAA;QAAAN,IAAA;QAAAO,WAAA;MAAA;MACA,KAAAC,MAAA;MACA,KAAAkB,aAAA;IACA;IAEAY,iBAAA;MACA,KAAAnC,eAAA;MACA,KAAAE,eAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}