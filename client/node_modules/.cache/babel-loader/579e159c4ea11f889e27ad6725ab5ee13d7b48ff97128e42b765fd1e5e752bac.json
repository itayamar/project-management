{"ast":null,"code":"// projects store\nimport Vue from \"vue\";\nexport default {\n  state: {\n    projects: [],\n    currentProject: null\n  },\n  mutations: {\n    SET_PROJECTS(state, projects) {\n      state.projects = projects;\n    },\n    UPDATE_PROJECT(state, updatedProject) {\n      const index = state.projects.findIndex(p => p._id === updatedProject._id);\n      if (index !== -1) {\n        Vue.set(state.projects, index, updatedProject);\n      }\n    },\n    REMOVE_PROJECT(state, projectId) {\n      state.projects = state.projects.filter(p => p._id !== projectId);\n    }\n  },\n  actions: {\n    async fetchProjects({\n      commit\n    }) {\n      try {\n        const response = await fetch('/api/projects');\n        if (!response.ok) throw new Error('Failed to fetch projects');\n        const projects = await response.json();\n        commit('SET_PROJECTS', projects);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n      }\n    },\n    async fetchProjectTasks({\n      commit\n    }) {}\n  }\n};","map":{"version":3,"names":["Vue","state","projects","currentProject","mutations","SET_PROJECTS","UPDATE_PROJECT","updatedProject","index","findIndex","p","_id","set","REMOVE_PROJECT","projectId","filter","actions","fetchProjects","commit","response","fetch","ok","Error","json","error","message","fetchProjectTasks"],"sources":["/Users/itayamar/WebstormProjects/toka/client/src/views/projects/projects.js"],"sourcesContent":["// projects store\nimport Vue from \"vue\";\n\nexport default {\n  state: {\n    projects: [],\n    currentProject: null,\n\n  },\n  mutations: {\n    SET_PROJECTS(state, projects) {\n      state.projects = projects;\n    },\n    UPDATE_PROJECT(state, updatedProject) {\n      const index = state.projects.findIndex(p => p._id === updatedProject._id)\n      if (index !== -1) {\n        Vue.set(state.projects, index, updatedProject)\n      }\n    },\n    REMOVE_PROJECT(state, projectId) {\n      state.projects = state.projects.filter(p => p._id !== projectId)\n    }\n  },\n  actions: {\n    async fetchProjects({ commit }) {\n      try {\n        const response = await fetch('/api/projects')\n        if (!response.ok) throw new Error('Failed to fetch projects')\n\n        const projects = await response.json()\n        commit('SET_PROJECTS', projects)\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n      }\n    },\n    async fetchProjectTasks({ commit }) {}\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;AAErB,eAAe;EACbC,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IACZC,cAAc,EAAE;EAElB,CAAC;EACDC,SAAS,EAAE;IACTC,YAAYA,CAACJ,KAAK,EAAEC,QAAQ,EAAE;MAC5BD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B,CAAC;IACDI,cAAcA,CAACL,KAAK,EAAEM,cAAc,EAAE;MACpC,MAAMC,KAAK,GAAGP,KAAK,CAACC,QAAQ,CAACO,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKJ,cAAc,CAACI,GAAG,CAAC;MACzE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBR,GAAG,CAACY,GAAG,CAACX,KAAK,CAACC,QAAQ,EAAEM,KAAK,EAAED,cAAc,CAAC;MAChD;IACF,CAAC;IACDM,cAAcA,CAACZ,KAAK,EAAEa,SAAS,EAAE;MAC/Bb,KAAK,CAACC,QAAQ,GAAGD,KAAK,CAACC,QAAQ,CAACa,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKG,SAAS,CAAC;IAClE;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;QAC7C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAE7D,MAAMpB,QAAQ,GAAG,MAAMiB,QAAQ,CAACI,IAAI,CAAC,CAAC;QACtCL,MAAM,CAAC,cAAc,EAAEhB,QAAQ,CAAC;MAClC,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdN,MAAM,CAAC,WAAW,EAAEM,KAAK,CAACC,OAAO,CAAC;MACpC;IACF,CAAC;IACD,MAAMC,iBAAiBA,CAAC;MAAER;IAAO,CAAC,EAAE,CAAC;EACvC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}