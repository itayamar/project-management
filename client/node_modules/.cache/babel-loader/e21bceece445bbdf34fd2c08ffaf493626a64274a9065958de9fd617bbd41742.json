{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nimport Pagination from \"@/components/Pagination.vue\";\nexport default {\n  name: 'ProjectList',\n  data() {\n    return {\n      showModal: false,\n      showDeleteModal: false,\n      isEditing: false,\n      projectToDelete: null,\n      projectForm: {\n        name: '',\n        description: ''\n      },\n      errors: {},\n      currentPage: 1,\n      projectsPerPage: 20\n    };\n  },\n  components: {\n    Pagination\n  },\n  computed: {\n    ...mapState({\n      projects: state => state.projects.projects,\n      totalProjects: state => state.projects.totalProjects\n    }),\n    ...mapGetters(['isLoading', 'hasError', 'errorMessage']),\n    paginatedProjects() {\n      const start = (this.currentPage - 1) * this.projectsPerPage;\n      const end = start + this.projectsPerPage;\n      return this.projects.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.$store.state.totalProjects / this.projectsPerPage);\n    }\n  },\n  created() {\n    this.loadProjects();\n  },\n  methods: {\n    ...mapActions({\n      fetchProjects: 'fetchProjects',\n      createProject: 'createProject',\n      updateProject: 'updateProject',\n      deleteProject: 'deleteProject'\n    }),\n    loadProjects(page = this.currentPage) {\n      this.currentPage = page;\n      this.fetchProjects({\n        page,\n        limit: this.projectsPerPage\n      });\n    },\n    validateForm() {\n      this.errors = {};\n      let isValid = true;\n      if (!this.projectForm.name.trim()) {\n        this.errors.name = 'Project name is required';\n        isValid = false;\n      } else if (this.projectForm.name.trim().length < 3) {\n        this.errors.name = 'Project name must be at least 3 characters';\n        isValid = false;\n      }\n      return isValid;\n    },\n    openCreateProjectModal() {\n      this.isEditing = false;\n      this.projectForm = {\n        name: '',\n        description: ''\n      };\n      this.showModal = true;\n    },\n    editProject(project) {\n      this.isEditing = true;\n      this.projectForm = {\n        name: project.name,\n        description: project.description || ''\n      };\n      this.projectToEdit = project;\n      this.showModal = true;\n    },\n    async saveProject() {\n      if (!this.validateForm()) return;\n      try {\n        if (this.isEditing) {\n          await this.updateProject({\n            projectId: this.projectToEdit._id,\n            projectData: this.projectForm\n          });\n          this.$toasted.show('Project updated successfully!', {\n            type: 'success'\n          });\n        } else {\n          await this.createProject(this.projectForm);\n          this.$toasted.show('Project created successfully!', {\n            type: 'success'\n          });\n        }\n        this.closeModal();\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, {\n          type: 'error'\n        });\n      }\n    },\n    confirmDelete(project) {\n      this.projectToDelete = project;\n      this.showDeleteModal = true;\n    },\n    async deleteProject() {\n      if (!this.projectToDelete) return;\n      try {\n        await this.deleteProject(this.projectToDelete._id);\n        this.$toasted.show('Project deleted successfully!', {\n          type: 'success'\n        });\n        this.closeDeleteModal();\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, {\n          type: 'error'\n        });\n      }\n    },\n    closeModal() {\n      this.showModal = false;\n      this.projectForm = {\n        name: '',\n        description: ''\n      };\n      this.errors = {};\n      this.projectToEdit = null;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.projectToDelete = null;\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","Pagination","name","data","showModal","showDeleteModal","isEditing","projectToDelete","projectForm","description","errors","currentPage","projectsPerPage","components","computed","projects","state","totalProjects","paginatedProjects","start","end","slice","totalPages","Math","ceil","$store","created","loadProjects","methods","fetchProjects","createProject","updateProject","deleteProject","page","limit","validateForm","isValid","trim","length","openCreateProjectModal","editProject","project","projectToEdit","saveProject","projectId","_id","projectData","$toasted","show","type","closeModal","error","message","confirmDelete","closeDeleteModal"],"sources":["src/views/projects/ProjectList.vue"],"sourcesContent":["<template>\n  <div class=\"project-list\">\n    <div class=\"header-section\">\n      <h2 class=\"section-title\">Projects</h2>\n      <button class=\"btn btn-primary\" @click=\"openCreateProjectModal\">\n        <span class=\"btn-icon\">+</span>New Project\n      </button>\n    </div>\n\n    <!-- Loading state -->\n    <div v-if=\"isLoading('project') || isLoading('tasks')\" class=\"empty-state\">\n      <p>Loading projects...</p>\n    </div>\n\n    <!-- Error state -->\n    <div v-else-if=\"hasError\" class=\"empty-state\">\n      <h3>Error loading projects</h3>\n      <p>{{ errorMessage }}</p>\n      <button class=\"btn btn-primary mt-3\" @click=\"loadProjects\">Retry</button>\n    </div>\n\n    <!-- Empty state -->\n    <div v-else-if=\"projects.length === 0\" class=\"empty-state\">\n      <h3>No projects yet</h3>\n      <p>Create your first project to get started</p>\n      <button class=\"btn btn-primary mt-3\" @click=\"openCreateProjectModal\">\n        <span class=\"btn-icon\">+</span>New Project\n      </button>\n    </div>\n    \n\n    <!-- Project Table -->\n    <div v-else class=\"row\">\n    {{totalProjects}} || {{projectsPerPage}} || {{totalPages}}\n      <Pagination\n          :currentPage=\"currentPage\"\n          :totalPages=\"totalPages\"\n          @page-changed=\"currentPage = $event\"\n      />\n      <div\n          v-for=\"project in paginatedProjects\"\n          :key=\"project._id\"\n          class=\"col-12 col-md-6 col-sm-12 mb-4\"\n      >\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <div class=\"card-title\">{{ project.name }}</div>\n          </div>\n\n          <div class=\"card-content\">\n            <p v-if=\"project.description\" class=\"text-gray\">\n              {{ project.description }}\n            </p>\n            <p v-else class=\"text-gray text-sm\">\n              No description\n            </p>\n          </div>\n\n          <div class=\"card-footer\">\n            <router-link :to=\"`/projects/${project._id}`\">\n              <button class=\"btn btn-secondary\">View Tasks</button>\n            </router-link>\n\n            <div>\n              <button class=\"btn btn-secondary btn-small mr-2\" @click=\"editProject(project)\">\n                Edit\n              </button>\n              <button class=\"btn btn-danger btn-small\" @click=\"confirmDelete(project)\">\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Project Modal -->\n    <div v-if=\"showModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3>{{ isEditing ? 'Edit Project' : 'Create Project' }}</h3>\n          <button class=\"close-btn\" @click=\"closeModal\">&times;</button>\n        </div>\n\n        <div class=\"modal-body\">\n          <form @submit.prevent=\"saveProject\">\n            <div class=\"form-group\">\n              <label class=\"form-label\" for=\"name\">Project Name</label>\n              <input\n                  id=\"name\"\n                  v-model=\"projectForm.name\"\n                  class=\"form-input\"\n                  type=\"text\"\n                  required\n                  :class=\"{'error': errors.name}\"\n              >\n              <p v-if=\"errors.name\" class=\"error-message\">{{ errors.name }}</p>\n            </div>\n\n            <div class=\"form-group\">\n              <label class=\"form-label\" for=\"description\">Description (optional)</label>\n              <input\n                  id=\"description\"\n                  v-model=\"projectForm.description\"\n                  class=\"form-input\"\n                  type=\"text\"\n              >\n            </div>\n\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary mr-2\" @click=\"closeModal\">\n                Cancel\n              </button>\n              <button type=\"submit\" class=\"btn btn-primary\">\n                {{ isEditing ? 'Update' : 'Create' }}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n\n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h3>Confirm Delete</h3>\n          <button class=\"close-btn\" @click=\"closeDeleteModal\">&times;</button>\n        </div>\n\n        <div class=\"modal-body\">\n          <p>Are you sure you want to delete \"{{ projectToDelete ? projectToDelete.name : '' }}\"?</p>\n          <p class=\"text-gray text-sm\">This will also delete all tasks associated with this project and cannot be undone.</p>\n        </div>\n\n        <div class=\"modal-footer\">\n          <button class=\"btn btn-secondary mr-2\" @click=\"closeDeleteModal\">\n            Cancel\n          </button>\n          <button class=\"btn btn-danger\" @click=\"deleteProject\">\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport Pagination from \"@/components/Pagination.vue\";\n\nexport default {\n  name: 'ProjectList',\n  data() {\n    return {\n      showModal: false,\n      showDeleteModal: false,\n      isEditing: false,\n      projectToDelete: null,\n      projectForm: {\n        name: '',\n        description: ''\n      },\n      errors: {},\n      currentPage: 1,\n      projectsPerPage: 20\n    }\n  },\n  components: {Pagination},\n  computed: {\n    ...mapState({\n      projects: state => state.projects.projects,\n      totalProjects: state => state.projects.totalProjects\n    }),\n    ...mapGetters([\n      'isLoading',\n      'hasError',\n      'errorMessage'\n    ]),\n    paginatedProjects() {\n      const start = (this.currentPage - 1) * this.projectsPerPage\n      const end = start + this.projectsPerPage\n      return this.projects.slice(start, end)\n    },\n    totalPages() {\n      return Math.ceil(this.$store.state.totalProjects / this.projectsPerPage)\n    }\n  },\n  created() {\n    this.loadProjects()\n  },\n  methods: {\n    ...mapActions({\n      fetchProjects: 'fetchProjects',\n      createProject: 'createProject',\n      updateProject: 'updateProject',\n      deleteProject: 'deleteProject'\n    }),\n\n    loadProjects(page = this.currentPage) {\n      this.currentPage = page\n      this.fetchProjects({ page, limit: this.projectsPerPage })\n    },\n\n    validateForm() {\n      this.errors = {}\n      let isValid = true\n\n      if (!this.projectForm.name.trim()) {\n        this.errors.name = 'Project name is required'\n        isValid = false\n      } else if (this.projectForm.name.trim().length < 3) {\n        this.errors.name = 'Project name must be at least 3 characters'\n        isValid = false\n      }\n\n      return isValid\n    },\n\n    openCreateProjectModal() {\n      this.isEditing = false\n      this.projectForm = {\n        name: '',\n        description: ''\n      }\n      this.showModal = true\n    },\n\n    editProject(project) {\n      this.isEditing = true\n      this.projectForm = {\n        name: project.name,\n        description: project.description || ''\n      }\n      this.projectToEdit = project\n      this.showModal = true\n    },\n\n    async saveProject() {\n      if (!this.validateForm()) return\n\n      try {\n        if (this.isEditing) {\n          await this.updateProject({\n            projectId: this.projectToEdit._id,\n            projectData: this.projectForm\n          })\n          this.$toasted.show('Project updated successfully!', { type: 'success' })\n        } else {\n          await this.createProject(this.projectForm)\n          this.$toasted.show('Project created successfully!', { type: 'success' })\n        }\n        this.closeModal()\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, { type: 'error' })\n      }\n    },\n\n    confirmDelete(project) {\n      this.projectToDelete = project\n      this.showDeleteModal = true\n    },\n\n    async deleteProject() {\n      if (!this.projectToDelete) return\n\n      try {\n        await this.deleteProject(this.projectToDelete._id)\n        this.$toasted.show('Project deleted successfully!', { type: 'success' })\n        this.closeDeleteModal()\n      } catch (error) {\n        this.$toasted.show(`Error: ${error.message}`, { type: 'error' })\n      }\n    },\n\n    closeModal() {\n      this.showModal = false\n      this.projectForm = { name: '', description: '' }\n      this.errors = {}\n      this.projectToEdit = null\n    },\n\n    closeDeleteModal() {\n      this.showDeleteModal = false\n      this.projectToDelete = null\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n@primary-color: #3b82f6;\n@secondary-color: #f3f4f6;\n@danger-color: #ef4444;\n@gray-text: #6b7280;\n\n.project-list {\n  padding: 2rem;\n\n  .header-section {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n\n    .section-title {\n      font-size: 2rem;\n      font-weight: 700;\n      color: @primary-color;\n    }\n\n    .btn-primary {\n      background-color: @primary-color;\n      color: white;\n      border: none;\n      padding: 0.5rem 1rem;\n      border-radius: 5px;\n      font-weight: bold;\n      transition: background-color 0.3s;\n\n      &:hover {\n        background-color: darken(@primary-color, 10%);\n      }\n\n      .btn-icon {\n        margin-right: 0.5rem;\n        font-size: 1.2rem;\n      }\n    }\n  }\n\n  .empty-state {\n    text-align: center;\n    padding: 4rem;\n    background: @secondary-color;\n    border: 1px solid #d1d5db;\n    border-radius: 10px;\n\n    h3 {\n      font-size: 1.5rem;\n      font-weight: bold;\n    }\n\n    p {\n      color: @gray-text;\n      margin: 1rem 0;\n    }\n  }\n\n  .card {\n    border: 1px solid #e5e7eb;\n    border-radius: 10px;\n    padding: 1rem;\n    background: white;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n\n    &:hover {\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n    }\n\n    .card-header {\n      margin-bottom: 1rem;\n\n      .card-title {\n        font-size: 1.25rem;\n        font-weight: bold;\n        color: @primary-color;\n      }\n    }\n\n    .card-content {\n      margin-bottom: 1rem;\n\n      .text-gray {\n        color: @gray-text;\n      }\n\n      .text-sm {\n        font-size: 0.85rem;\n      }\n    }\n\n    .card-footer {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      gap: 1rem;\n      flex-wrap: wrap;\n\n      .btn {\n        padding: 0.4rem 0.8rem;\n        border-radius: 4px;\n        font-size: 0.875rem;\n        font-weight: 600;\n        border: none;\n        cursor: pointer;\n\n        &-secondary {\n          background: @secondary-color;\n          color: #374151;\n\n          &:hover {\n            background: darken(@secondary-color, 5%);\n          }\n        }\n\n        &-danger {\n          background: @danger-color;\n          color: white;\n\n          &:hover {\n            background: darken(@danger-color, 10%);\n          }\n        }\n\n        &-small {\n          font-size: 0.75rem;\n          padding: 0.3rem 0.6rem;\n        }\n      }\n    }\n  }\n}\n\n// Modal styles\n.modal {\n  position: fixed;\n  inset: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n\n  &-content {\n    background-color: #fff;\n    border-radius: 8px;\n    width: 90%;\n    max-width: 500px;\n    overflow: hidden;\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n  }\n\n  &-header {\n    background: @secondary-color;\n    padding: 1rem;\n    border-bottom: 1px solid #e5e7eb;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    h3 {\n      margin: 0;\n      font-size: 1.25rem;\n      font-weight: bold;\n    }\n\n    .close-btn {\n      background: none;\n      border: none;\n      font-size: 1.5rem;\n      cursor: pointer;\n      color: #6b7280;\n    }\n  }\n\n  &-body {\n    padding: 1.5rem;\n\n    .form-group {\n      margin-bottom: 1rem;\n\n      .form-label {\n        display: block;\n        font-weight: 600;\n        margin-bottom: 0.5rem;\n      }\n\n      .form-input {\n        width: 100%;\n        padding: 0.5rem;\n        border: 1px solid #d1d5db;\n        border-radius: 5px;\n        font-size: 1rem;\n\n        &.error {\n          border-color: @danger-color;\n        }\n      }\n\n      .error-message {\n        color: @danger-color;\n        font-size: 0.75rem;\n        margin-top: 0.25rem;\n      }\n    }\n  }\n\n  &-footer {\n    display: flex;\n    justify-content: flex-end;\n    padding: 1rem;\n    border-top: 1px solid #e5e7eb;\n\n    .btn {\n      margin-left: 0.5rem;\n    }\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}