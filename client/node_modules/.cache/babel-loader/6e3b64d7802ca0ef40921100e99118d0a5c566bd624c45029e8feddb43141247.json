{"ast":null,"code":"// projects store\nimport Vue from \"vue\";\nimport { fetcheProjects } from \"@/services/projects\";\nexport default {\n  state: {\n    projects: [],\n    currentProject: null\n  },\n  mutations: {\n    SET_PROJECTS(state, projects) {\n      state.projects = projects;\n    },\n    UPDATE_PROJECT(state, updatedProject) {\n      const index = state.projects.findIndex(p => p._id === updatedProject._id);\n      if (index !== -1) {\n        Vue.set(state.projects, index, updatedProject);\n      }\n    },\n    REMOVE_PROJECT(state, projectId) {\n      state.projects = state.projects.filter(p => p._id !== projectId);\n    }\n  },\n  actions: {\n    async fetchProjects({\n      commit\n    }) {\n      try {\n        commit('SET_LOADING', {\n          type: 'projects',\n          value: true\n        });\n        commit('SET_ERROR', null);\n        console.log('hi 2');\n        const projects = await fetcheProjects();\n        commit('SET_PROJECTS', projects);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n      } finally {\n        commit('SET_LOADING', {\n          type: 'projects',\n          value: false\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["Vue","fetcheProjects","state","projects","currentProject","mutations","SET_PROJECTS","UPDATE_PROJECT","updatedProject","index","findIndex","p","_id","set","REMOVE_PROJECT","projectId","filter","actions","fetchProjects","commit","type","value","console","log","error","message"],"sources":["/Users/itayamar/WebstormProjects/toka/client/src/views/projects/projects.js"],"sourcesContent":["// projects store\nimport Vue from \"vue\";\nimport { fetcheProjects } from \"@/services/projects\";\n\nexport default {\n  state: {\n    projects: [],\n    currentProject: null,\n\n  },\n  mutations: {\n    SET_PROJECTS(state, projects) {\n      state.projects = projects;\n    },\n    UPDATE_PROJECT(state, updatedProject) {\n      const index = state.projects.findIndex(p => p._id === updatedProject._id)\n      if (index !== -1) {\n        Vue.set(state.projects, index, updatedProject)\n      }\n    },\n    REMOVE_PROJECT(state, projectId) {\n      state.projects = state.projects.filter(p => p._id !== projectId)\n    }\n  },\n  actions: {\n    async fetchProjects({ commit }) {\n      try {\n        commit('SET_LOADING', { type: 'projects', value: true })\n        commit('SET_ERROR', null)\n        console.log('hi 2')\n\n        const projects = await fetcheProjects()\n        commit('SET_PROJECTS', projects)\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n      } finally {\n        commit('SET_LOADING', { type: 'projects', value: false })\n      }\n    },\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;AACrB,SAASC,cAAc,QAAQ,qBAAqB;AAEpD,eAAe;EACbC,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IACZC,cAAc,EAAE;EAElB,CAAC;EACDC,SAAS,EAAE;IACTC,YAAYA,CAACJ,KAAK,EAAEC,QAAQ,EAAE;MAC5BD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B,CAAC;IACDI,cAAcA,CAACL,KAAK,EAAEM,cAAc,EAAE;MACpC,MAAMC,KAAK,GAAGP,KAAK,CAACC,QAAQ,CAACO,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKJ,cAAc,CAACI,GAAG,CAAC;MACzE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBT,GAAG,CAACa,GAAG,CAACX,KAAK,CAACC,QAAQ,EAAEM,KAAK,EAAED,cAAc,CAAC;MAChD;IACF,CAAC;IACDM,cAAcA,CAACZ,KAAK,EAAEa,SAAS,EAAE;MAC/Bb,KAAK,CAACC,QAAQ,GAAGD,KAAK,CAACC,QAAQ,CAACa,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKG,SAAS,CAAC;IAClE;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC9B,IAAI;QACFA,MAAM,CAAC,aAAa,EAAE;UAAEC,IAAI,EAAE,UAAU;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACxDF,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;QACzBG,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QAEnB,MAAMpB,QAAQ,GAAG,MAAMF,cAAc,CAAC,CAAC;QACvCkB,MAAM,CAAC,cAAc,EAAEhB,QAAQ,CAAC;MAClC,CAAC,CAAC,OAAOqB,KAAK,EAAE;QACdL,MAAM,CAAC,WAAW,EAAEK,KAAK,CAACC,OAAO,CAAC;MACpC,CAAC,SAAS;QACRN,MAAM,CAAC,aAAa,EAAE;UAAEC,IAAI,EAAE,UAAU;UAAEC,KAAK,EAAE;QAAM,CAAC,CAAC;MAC3D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}