{"ast":null,"code":"// projects store\nimport Vue from \"vue\";\nimport { fetchProjects } from \"@/services/projects\";\nexport default {\n  state: {\n    projects: [],\n    currentProject: null,\n    totalProjects: 0\n  },\n  mutations: {\n    SET_PROJECTS(state, projects) {\n      state.projects = projects;\n    },\n    SET_TOTAL_PROJECTS(state, totalProjects) {\n      state.totalProjects = totalProjects;\n    },\n    UPDATE_PROJECT(state, updatedProject) {\n      const index = state.projects.findIndex(p => p._id === updatedProject._id);\n      if (index !== -1) {\n        Vue.set(state.projects, index, updatedProject);\n      }\n    },\n    REMOVE_PROJECT(state, projectId) {\n      state.projects = state.projects.filter(p => p._id !== projectId);\n    }\n  },\n  actions: {\n    async fetchProjects({\n      commit\n    }, {\n      page = 1,\n      limit = 20\n    }) {\n      try {\n        commit('SET_LOADING', {\n          type: 'projects',\n          value: true\n        });\n        commit('SET_ERROR', null);\n        const projectsData = await fetchProjects(page, limit);\n        console.log('here', projectsData);\n        commit('SET_PROJECTS', projectsData.projects);\n        commit('SET_TOTAL_PROJECTS', projectsData.total);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n      } finally {\n        commit('SET_LOADING', {\n          type: 'projects',\n          value: false\n        });\n      }\n    },\n    async fetchProject({\n      commit\n    }, projectId) {\n      commit('SET_LOADING', {\n        type: 'project',\n        value: true\n      }, {\n        root: true\n      });\n      commit('SET_ERROR', null, {\n        root: true\n      });\n      try {\n        const response = await fetch(`/api/projects/${projectId}`);\n        if (!response.ok) throw new Error('Failed to fetch project');\n        const project = await response.json();\n        commit('SET_CURRENT_PROJECT', project);\n        return project;\n      } catch (error) {\n        commit('SET_ERROR', error.message, {\n          root: true\n        });\n        throw error;\n      } finally {\n        commit('SET_LOADING', {\n          type: 'project',\n          value: false\n        }, {\n          root: true\n        });\n      }\n    },\n    async updateProject({\n      commit\n    }, project) {\n      commit('SET_LOADING', {\n        type: 'project',\n        value: true\n      });\n    }\n  }\n};","map":{"version":3,"names":["Vue","fetchProjects","state","projects","currentProject","totalProjects","mutations","SET_PROJECTS","SET_TOTAL_PROJECTS","UPDATE_PROJECT","updatedProject","index","findIndex","p","_id","set","REMOVE_PROJECT","projectId","filter","actions","commit","page","limit","type","value","projectsData","console","log","total","error","message","fetchProject","root","response","fetch","ok","Error","project","json","updateProject"],"sources":["/Users/itayamar/WebstormProjects/toka/client/src/views/projects/projects.js"],"sourcesContent":["// projects store\nimport Vue from \"vue\";\nimport {fetchProjects} from \"@/services/projects\";\n\nexport default {\n  state: {\n    projects: [],\n    currentProject: null,\n    totalProjects: 0,\n  },\n  mutations: {\n    SET_PROJECTS(state, projects) {\n      state.projects = projects;\n    },\n    SET_TOTAL_PROJECTS(state, totalProjects) {\n      state.totalProjects = totalProjects;\n    },\n    UPDATE_PROJECT(state, updatedProject) {\n      const index = state.projects.findIndex(p => p._id === updatedProject._id)\n      if (index !== -1) {\n        Vue.set(state.projects, index, updatedProject)\n      }\n    },\n    REMOVE_PROJECT(state, projectId) {\n      state.projects = state.projects.filter(p => p._id !== projectId)\n    }\n  },\n  actions: {\n    async fetchProjects({ commit }, {page=1, limit=20}) {\n      try {\n        commit('SET_LOADING', { type: 'projects', value: true })\n        commit('SET_ERROR', null)\n        const projectsData = await fetchProjects(page, limit)\n        console.log('here', projectsData)\n        commit('SET_PROJECTS', projectsData.projects)\n        commit('SET_TOTAL_PROJECTS', projectsData.total)\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n      } finally {\n        commit('SET_LOADING', { type: 'projects', value: false })\n      }\n    },\n    async fetchProject({ commit }, projectId) {\n      commit('SET_LOADING', { type: 'project', value: true }, { root: true })\n      commit('SET_ERROR', null, { root: true })\n\n      try {\n        const response = await fetch(`/api/projects/${projectId}`)\n        if (!response.ok) throw new Error('Failed to fetch project')\n\n        const project = await response.json()\n        commit('SET_CURRENT_PROJECT', project)\n        return project\n      } catch (error) {\n        commit('SET_ERROR', error.message, { root: true })\n        throw error\n      } finally {\n        commit('SET_LOADING', { type: 'project', value: false }, { root: true })\n      }\n    },\n    async updateProject({ commit }, project) {\n      commit('SET_LOADING', { type: 'project', value: true })\n      \n    }\n  },\n\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}